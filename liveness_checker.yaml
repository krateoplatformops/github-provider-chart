---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gh-provider-liveness-checker
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gh-provider-liveness-checker
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gh-provider-liveness-checker
subjects:
- kind: ServiceAccount
  name: gh-provider-liveness-checker
roleRef:
  kind: Role
  name: gh-provider-liveness-checker
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gh-provider-liveness-checker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gh-provider-liveness-checker
  template:
    metadata:
      labels:
        app: gh-provider-liveness-checker
    spec:
      serviceAccountName: gh-provider-liveness-checker
      containers:
      - name: liveness-checker
        image: python:3.9-slim
        command: ["/bin/sh", "-c"]
        args:
        - |
          pip install kubernetes requests
          cat > checker.py << EOL
          from kubernetes import client, config
          import requests
          import time
          import logging

          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          config.load_incluster_config()
          v1 = client.CoreV1Api()

          TARGET_DEPLOYMENT = "gh-provider-github-provider"
          TARGET_NAMESPACE = "default"
          CHECK_INTERVAL = 10  # seconds

          def check_pod_liveness():
              try:
                  pods = v1.list_namespaced_pod(TARGET_NAMESPACE, label_selector=f"app.kubernetes.io/name=github-provider")
                  for pod in pods.items:
                    if pod.metadata.name.startswith(TARGET_DEPLOYMENT):
                        if pod.status.phase == "Running":
                            try:
                                response = requests.get(f"http://{pod.status.pod_ip}:8081/healthz", timeout=5)
                                if response.status_code == 200:
                                    logger.info(f"Pod {pod.metadata.name} is live and healthy")
                                else:
                                    logger.warning(f"Pod {pod.metadata.name} health check failed with status code {response.status_code}")
                            except requests.RequestException as e:
                                logger.error(f"Failed to connect to pod {pod.metadata.name}: {str(e)}")
                        else:
                            logger.warning(f"Pod {pod.metadata.name} is not in Running state. Current state: {pod.status.phase}")
                    else:
                        logger.warning("No matching pods found")
              except Exception as e:
                  logger.error(f"Error checking pod liveness: {str(e)}")

          if __name__ == "__main__":
              logger.info("Starting continuous liveness checker for gh-provider-github-provider")
              while True:
                  check_pod_liveness()
                  time.sleep(CHECK_INTERVAL)
          EOL
          python checker.py
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi